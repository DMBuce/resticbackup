.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RESTICBACKUP 1"
.TH RESTICBACKUP 1 "2022-04-17" "perl v5.34.0" "resticbackup"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
resticbackup \- Restic with hooks.
.SH "USAGE"
.IX Header "USAGE"
resticbackup \s-1ACTION\s0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When invoked as \f(CW\*(C`resticbackup foo\*(C'\fR, resticbackup will
.IP "\(bu" 4
Run each *.pre hook. See \*(L"\s-1HOOKS\*(R"\s0 for details.
.IP "\(bu" 4
Look up \f(CW$RESTICBACKUP_FOO\fR in the config. See \*(L"\s-1CONFIGURATION\*(R"\s0 for details.
.IP "\(bu" 4
Run \f(CW\*(C`restic $RESTICBACKUP_FOO\*(C'\fR.
.IP "\(bu" 4
Run each *.post hook. See \*(L"\s-1HOOKS\*(R"\s0 for details.
.PP
Invoking resticbackup as \f(CW\*(C`resticbackup_foo\*(C'\fR or \f(CW\*(C`restic_foo\*(C'\fR
with no other arguments
is equivalent to invoking it as \f(CW\*(C`resticbackup foo\*(C'\fR.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
The location of the configuration directory
varies depending on how resticbackup was installed.
Usually it is found at /etc/resticbackup.d or /usr/local/etc/resticbackup.d .
.PP
The file named \f(CW\*(C`config\*(C'\fR within this directory is the config file.
The format of this file is bash shell.
Config options are set as shell variables, for example:
.PP
.Vb 1
\&        OPTION=value
.Ve
.PP
Options that are not use the environment variable of the same name,
or a default if no such environment variable is defined.
Values that contain whitespace must be quoted, for example:
.PP
.Vb 2
\&        OPTION=\*(Aqmy value\*(Aq
\&        OPTION="my value"
.Ve
.PP
Other shell expansion rules apply.
See \*(L"Parameters\*(R" in \f(CW\*(C`man bash\*(C'\fR for details.
.PP
Each config option is described below.
.PP
\&\fB\s-1RESTIC_PASSWORD_FILE\s0\fR,
\&\fB\s-1RESTIC_PASSWORD_COMMAND\s0\fR,
\&\fB\s-1RESTIC_REPOSITORY\s0\fR,
\&\fB\s-1RESTIC_REPOSITORY_FILE\s0\fR,
etc.
.Sp
.RS 4
Config options are exported to restic's environment,
so all of restic's environment variables are valid config options.
See
restic documentation <https://restic.readthedocs.io/en/latest/040_backup.html#environment-variables>
for details.
.RE
.PP
\&\fBRESTICBACKUP_*\fR
.Sp
.RS 4
Each config option that starts with \f(CW\*(C`RESTICBACKUP_\*(C'\fR
defines an action that can be invoked from the command line.
The action's name is derived from the option name by removing \f(CW\*(C`RESTICBACKUP_\*(C'\fR
and converting to lowercase.
When invoking an action, the option's value is passed as arguments to restic.
.Sp
For example, \f(CW\*(C`RESTICBACKUP_FOO="snapshots \-v"\*(C'\fR will cause \f(CW\*(C`resticbackup foo\*(C'\fR
to run \f(CW\*(C`restic snapshots \-v\*(C'\fR .
.RE
.PP
\&\fB\s-1LOG_FILE\s0\fR
.Sp
.RS 4
Controls logging behavior.
Use '\-' to log to stdout,
\&'syslog' to log to syslog (requires logger),
or a filename to log to a file.
.Sp
Default: \-
.RE
.PP
\&\fBOther Options\fR
.Sp
.RS 4
Hooks may have their own custom options.
See \s-1HOOKS\s0 for details.
.RE
.SH "HOOKS"
.IX Header "HOOKS"
In the same folder as the config file,
there is a \f(CW\*(C`hooks\*(C'\fR directory
where you can place hooks to run before or after the restic command.
A hook is any executable that ends in \f(CW\*(C`.pre\*(C'\fR or \f(CW\*(C`.post\*(C'\fR .
\&\f(CW\*(C`resticbackup\*(C'\fR will run *.pre hooks before running restic,
and *.post hooks afterward.
.PP
Pre hooks are passed two arguments:
the exit code of the last pre hook that failed
(or \f(CW0\fR if no hooks failed),
and the action about to be performed
(e.g. for \f(CW\*(C`resticbackup backup\*(C'\fR, the action is \f(CW\*(C`backup\*(C'\fR).
If any pre hook fails,
resticbackup will exit without running the restic command.
.PP
Post hooks are also passed two arguments:
the exit code of the restic command that was run,
and the action that was performed.
.PP
Each hook runs in a modified environment
that includes the options set in the config file.
.PP
Several example hooks are provided with resticbackup.
Their behavior and configuration options are described below.
.PP
\&\fBcheck\-integ.post\fR
.Sp
.RS 4
Does an integrity check when running \f(CW\*(C`resticbackup prune\*(C'\fR.
The result of the check is written to a spool file in the same format as
Check \s-1MK\s0 local checks <https://docs.checkmk.com/latest/en/localchecks.html>.
.Sp
The config option
controls the path to the spool file.
.Sp
Options:
.IP "\(bu" 4
\&\fB\s-1CHECKMK_INTEGRITY_SPOOL\s0\fR=/path \- The path to the spool file
.RE
.RS 4
.RE
.PP
\&\fBcheck\-snaps.post\fR
.Sp
.RS 4
Checks that the number of snapshots taken recently is above some threshold.
The result of the check is written to a spool file in the same format as
Check \s-1MK\s0 local checks <https://docs.checkmk.com/latest/en/localchecks.html>.
.Sp
Options:
.IP "\(bu" 4
\&\fB\s-1CHECKMK_SNAPSHOTS_SPOOL\s0\fR=/path \- The path to the spool file
.IP "\(bu" 4
\&\fB\s-1CHECKMK_SNAPSHOTS_THRESHOLDS\s0\fR=period:num_crit:num_warn \- The period of time to check, the warning threshold, and the critical threshold (e.g. \f(CW\*(C`1day:6:10\*(C'\fR)
.RE
.RS 4
.RE
.PP
\&\f(CW\*(C`repo\-mounted.pre\*(C'\fR
.Sp
.RS 4
Checks to make sure that \f(CW$RESTIC_REPOSITORY\fR is mounted before taking a backup.
.RE
.PP
\&\f(CW\*(C`z\-init\-repo.pre\*(C'\fR
.Sp
.RS 4
Initializes the repo if it hasn't yet been initialized.
.RE
.SH "EXAMPLES"
.IX Header "EXAMPLES"
In order to use resticbackup,
you will likely need to define a password and repository in the config file
(usually located at /etc/resticbackup.d/config
or /usr/local/etc/resticbackup.d/config).
.PP
.Vb 2
\&        RESTIC_PASSWORD_FILE=/etc/resticbackup.d/password
\&        RESTIC_REPOSITORY=/backup/restic
.Ve
.PP
You will also need to make sure that any custom actions are configured.
There are two example actions in the default config:
.PP
.Vb 2
\&        RESTICBACKUP_BACKUP="backup \-v \-\-exclude\-file=/etc/resticbackup.d/exclude /"
\&        RESTICBACKUP_PRUNE="forget \-\-prune \-\-keep\-hourly 12 \-\-keep\-daily 7 \-\-keep\-weekly 4 \-\-keep\-monthly 3"
.Ve
.PP
These settings will run the appropriate restic subcommands
when invoking \f(CW\*(C`resticbackup backup\*(C'\fR and \f(CW\*(C`resticbackup prune\*(C'\fR.
.PP
You can configure resticbackup to run any restic command in this way.
E.g. if you were to add the following setting,
\&\f(CW\*(C`resticbackup snap\*(C'\fR would run \f(CW\*(C`restic snapshots\*(C'\fR
.PP
.Vb 1
\&        RESTICBACKUP_SNAP=snapshots
.Ve
.PP
You can use symlinks to run restic commands
without passing any arguments to resticbackup.
For example,
under many cron setups you can
run \f(CW\*(C`resticbackup backup\*(C'\fR daily and \f(CW\*(C`resticbackup prune\*(C'\fR weekly with
.PP
.Vb 2
\&        ln \-s \`which resticbackup\` /etc/cron.daily/restic_backup
\&        ln \-s \`which resticbackup\` /etc/cron.daily/resticbackup_prune
.Ve
.PP
In the same folder as the config file,
there is a \f(CW\*(C`hooks\*(C'\fR directory
where you can place executable hooks to run before or after the restic command.
Several example hooks are provided that implement the following features:
.IP "\(bu" 4
Check to make sure a repository is mounted before taking a backup
.IP "\(bu" 4
Initialize the repo if it hasn't yet been initialized
.IP "\(bu" 4
Do an integrity check after pruning the repository
.IP "\(bu" 4
Check that the number of snapshots taken recently is above some threshold
.PP
Some of these hooks have additional configuration settings in the config file.
To use a hook, remove its \f(CW\*(C`.disabled\*(C'\fR extension.
.SH "AUTHORS"
.IX Header "AUTHORS"
resticbackup was written by DMBuce <https://github.com/DMBuce> .
.SH "DISTRIBUTION"
.IX Header "DISTRIBUTION"
The latest version of resticbackup can be downloaded from
https://github.com/DMBuce/resticbackup .
